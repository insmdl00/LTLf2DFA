start: ltlf_formula

?ltlf_formula:     ltlf_equivalence
?ltlf_equivalence: ltlf_implication (EQUIVALENCE ltlf_implication)*
?ltlf_implication: ltlf_or (IMPLY ltlf_or)*
?ltlf_or:          ltlf_and (OR ltlf_and)*
?ltlf_and:         ltlf_until (AND ltlf_until)*
?ltlf_until:       ltlf_release (UNTIL ltlf_release)*
?ltlf_release:     ltlf_while (RELEASE ltlf_while)*
?ltlf_while: 	   ltlf_trigger (WHILE ltlf_trigger)*
?ltlf_trigger:     ltlf_since (TRIGGER ltlf_since)*
?ltlf_since:       ltlf_unaryop(SINCE ltlf_unaryop)*

?ltlf_unaryop:     ltlf_always
             |     ltlf_eventually
             |     ltlf_next
             |     ltlf_weak_next
             |     ltlf_once
             |     ltlf_before
             |     ltlf_wbefore
             |     ltlf_not
             |     ltlf_wrapped

?ltlf_always:      ALWAYS ltlf_unaryop
?ltlf_eventually:  EVENTUALLY ltlf_unaryop
?ltlf_next:        NEXT ltlf_unaryop
?ltlf_weak_next:   WEAK_NEXT ltlf_unaryop
?ltlf_historically: HISTORICALLY ltlf_unaryop
?ltlf_once:         ONCE ltlf_unaryop
?ltlf_before:       BEFORE ltlf_unaryop
?ltlf_wbefore:      WBEFORE ltlf_unaryop
?ltlf_not:         NOT ltlf_unaryop
?ltlf_wrapped:     ltlf_atom
             |     LSEPARATOR ltlf_formula RSEPARATOR
?ltlf_atom:        ltlf_symbol
          |        ltlf_true
          |        ltlf_false
          |        ltlf_last
          |        ltlf_init

ltlf_symbol: SYMBOL_NAME
ltlf_true: prop_true
ltlf_false: prop_false
ltlf_last: LAST
ltlf_init: START

// Operators must not be part of a word
UNTIL.2: /U(?=[^a-z]|$)/
WHILE.2: /W(?=[^a-z]|$)/
RELEASE.2: /R(?=[^a-z]|$)/
ALWAYS.2: /G(?=[^a-z]|$)/
EVENTUALLY.2: /F(?=[^a-z]|$)/
NEXT.2: /X(?=[^a-z]|$)/
WEAK_NEXT.2: /WX(?=[^a-z]|$)/
LAST.2: /(?i:last)/
SINCE.2: /S(?=[^a-z]|$)/
TRIGGER.2: /T(?=[^a-z]|$)/
HISTORICALLY.2: /H(?=[^a-z]|$)/
ONCE.2: /O(?=[^a-z]|$)/
BEFORE.2: /Y(?=[^a-z]|$)/
WBEFORE.2: /WY(?=[^a-z]|$)/
START.2: /(?i:init)/



// Symbols cannot contain uppercase letters, because these are reserved
SYMBOL_NAME: /[a-z][a-z0-9_]*/

%ignore /\s+/

%import .pl.prop_true -> prop_true
%import .pl.prop_false -> prop_false
%import .pl.NOT -> NOT
%import .pl.OR -> OR
%import .pl.AND -> AND
%import .pl.EQUIVALENCE -> EQUIVALENCE
%import .pl.IMPLY -> IMPLY
%import .pl.LSEPARATOR -> LSEPARATOR
%import .pl.RSEPARATOR -> RSEPARATOR
